---

- name: Create public key list
  ansible.builtin.set_fact:
    public_keys: []
  when: public_keys is not defined

- name: Set config file path
  ansible.builtin.set_fact:
    config_file: "tmp/{{ client_name }}/{{ interface_name }}.conf"

- name: Check if client exists
  ansible.builtin.stat:
    path: "{{ config_file }}"
  register: client_dir_stat

- name: Get public key if already exists
  ansible.builtin.set_fact:
    private_key: "{{ lookup('ini', 'PrivateKey section=Interface file=' + config_file) }}"
  when: client_dir_stat.stat.exists

- name: Create private key
  ansible.builtin.command: wg genkey
  changed_when: true
  register: result
  when: not client_dir_stat.stat.exists

- name: Set private key
  ansible.builtin.set_fact:
    private_key: "{{ result.stdout }}"
  when: not client_dir_stat.stat.exists

- name: Create public key
  ansible.builtin.shell: set -o pipefail && echo "{{ private_key }}" | wg pubkey
  changed_when: false
  register: result
  # when: client_dir_stat.stat.exists == False

- name: Set public key
  ansible.builtin.set_fact:
    public_key: "{{ result.stdout }}"

- name: Create directory
  ansible.builtin.file:
    path: tmp/{{ client_name }}
    state: directory
    mode: "0755"

- name: Render interface template
  ansible.builtin.template:
    src: wg.j2
    dest: "tmp/{{ client_name }}/{{ interface_name }}.conf"
    force: true
    mode: "0644"
  vars:
    wg_private_key: "{{ private_key }}"
    wg_public_key: "{{ public_key }}"

- name: Initialize peer var
  ansible.builtin.set_fact:
    peer: {}
- name: Add peer data
  ansible.builtin.set_fact:
    peer: "{{ peer | default({}) | combine({peer_item.k: peer_item.v}) }}"
  with_items:
    - k: 'client_name'
      v: "{{ client_name }}"
    - k: 'public_key'
      v: "{{ public_key }}"
    - k: 'ip_address'
      v: "{{ wg_address }}/32"
    # - k: 'ip_address'
    #   v: "{{ peer.ip_address + ', ' + wg_address6 + '/128' if wg_address6 is defined }}"
    # - k: {'ip_address + ip_address'
    #   v: "{% if wg_address6 is defined%}{{', ' + wg_address6 + '/128' }}{%endif%}"
    # - k: 'ip_address'
    #   v: "{{ peer.ip_address + ', '+ route_home if ip_address is defined }}"
  loop_control:
    loop_var: peer_item

- name: Add peer data
  ansible.builtin.set_fact:
    peer: "{{ peer | default({}) | combine({ peer_item.k : peer_item.v }) if peer_item.v is defined }}"
  with_items:
    - k: "{{ 'ip_address' if wg_address6 is defined }}"
      v: "{{ peer.ip_address + ', ' + wg_address6 + '/128' if wg_address6 is defined }}"
    - k: "has_endpoint"
      v: false
    # - k: "{{ }}"
  loop_control:
    loop_var: peer_item

- name: Add peer data
  ansible.builtin.set_fact:
    peer: "{{ peer | combine({'ip_address': peer.ip_address + ', ' + route_home, 'has_endpoint': true}) }}"
  when: route_home != ''

- name: Save public key to list
  ansible.builtin.set_fact:
    public_keys: "{{ public_keys + [peer] }}"
    # public_keys: |
    #   "{{ public_keys + [ {'client_name': client_name, 'public_key':public_key, 'ip_address':ip_address} ]}}"
