---
# tasks file for maxxberg.hcloud-server
- name: Create Server
  hetzner.hcloud.hcloud_server:
    api_token: "{{ api_token }}"
    name: "{{ server_name }}"
    server_type: "{{ server_type }}"
    image: "{{ server_image }}"
    state: "{{ state }}"
    location: "{{ server_location }}"
    ssh_keys:
      "{{ ssh_keys }}"
  register: hc
  delegate_to: localhost

- name: Check for successfull server creation
  ansible.builtin.fail:
    msg: "Could not retrieve an ip address for the server"
  when: hc.hcloud_server is none and state == 'present'
  delegate_to: localhost

- name: Wait for system to become reachable
  ansible.builtin.wait_for:
    host: "{{ hc.hcloud_server.ipv4_address }}"
    port: 22
    state: started
    timeout: 300
  when: state == 'present'
  delegate_to: localhost

- name: Set DNS
  community.dns.hetzner_dns_record_set:
    state: "{{ state }}"
    zone: "{{ domain }}"
    type: A
    prefix: "{{ server_name }}"
    value: "{{ hc.hcloud_server.ipv4_address }}"
    hetzner_token: "{{ dns_api_key }}"
  delegate_to: localhost

- name: Remove old host-keys
  ansible.builtin.shell: ssh-keygen -R {{ (server_name + '.' + domain) | quote }} ; ssh-keygen -R {{ hc.hcloud_server.ipv4_address | quote }}
  register: shell_output
  changed_when: shell_output.rc == 0
  ignore_errors: true
  delegate_to: localhost

- name: Add ssh host-key
  ansible.builtin.shell: ssh-keyscan -H {{ hc.hcloud_server.ipv4_address | quote }} >> ~/.ssh/known_hosts
  register: shell_output
  changed_when: shell_output.rc == 0
  ignore_errors: true
  when: state == 'present'
  delegate_to: localhost

# - name: add ssh host-key
#   shell: ssh-keyscan -H {{ (server_name + '.' + dns.domain) | quote }} >> ~/.ssh/known_hosts
#   ignore_errors: yes
#   when: state == 'present'

- name: Set ip to hostvars
  ansible.builtin.add_host:
    name: "{{ server_name + '.' + domain }}"
    ansible_host: "{{ hc.hcloud_server.ipv4_address }}"
  when: state == 'present'
  delegate_to: localhost
